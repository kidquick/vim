" Install
" 1. wget -O ~/.vimrc https://raw.githubusercontent.com/kidquick/vim/master/.vimrc-server
" 2. git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" 3. mkdir ~/.vim/colors ~/.vim/.backup ~/.vim/.swap ~/.vim/.undo
" 4. wget -O ~/.vim/colors/solarized.vim https://raw.githubusercontent.com/altercation/vim-colors-solarized/master/colors/solarized.vim
" 5. :PluginInstall or :PluginUpdate

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" File tree browsing
Plugin 'scrooloose/nerdtree'
let NERDTreeQuitOnOpen = 1

" Fuzzy file searching
Plugin 'ctrlpvim/ctrlp.vim'
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/](\.git|tmp)$',
	\ 'file': ''
	\ }

" XHTML auto-complete
Plugin 'alvan/vim-closetag'	" Auto-complete XHTML tags
let g:closetag_filenames = "*.htm,*.html,*.xhtml"

" Session management
"Plugin 'xolox/vim-misc'			" base class for xolox plugins
"Plugin 'xolox/vim-session'		" session manager
"let g:session_autosave = 'yes'
"let g:session_autoload = 'yes'

" Airline bar
Plugin 'powerline/powerline'
Plugin 'bling/vim-airline'
"let g:airline_theme='bubblegum'
"let g:airline_powerline_fonts=1
"let g:airline#extensions#tabline#enabled=1
set laststatus=2					" always show status line

" All Vundle plugins must be added before the following line
call vundle#end()


" Display settings
syntax on
filetype plugin indent on
colorscheme solarized				" must be in ~/.vim/colors/solarized.vim
set background=dark
set t_Co=256								" Important! (vim.wikia.com/wiki/256_colors_in_vim)
set encoding=utf-8
set number		" enable line numbers
"winpos 0 0		" open vim window at (0, 0)
set wrap linebreak nolist
set autowriteall
set diffopt=vertical	" diff always opens in vertical split
set backspace=indent,eol,start		" allow backspace over whitespace
set nohidden		" when closing tab, remove the buffer
set clipboard=unnamedplus 	" yanks go on system clipboard
"set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
"set lines=30
"set columns=100
"let loaded_matchparen = 1		" set showmatch
"set mat=5							" bracket blinking

" Undo settings
set undofile					" persistent undo
set undolevels=1000		" number of undo's to remember
set undoreload=10000	" when a file is edited externally and reloaded in vim

" Backup, swap and undo folders
set backupdir=~/.vim/.backup
set directory=~/.vim/.swap
set undodir=~/.vim/.undo

" Tab settings
"set tabstop=2 softtabstop=0 noexpandtab shiftwidth=2  " prefer tabs
set tabstop=2 shiftwidth=2 expandtab  " prefer spaces
:command! -range=% -nargs=0 Tab2Space execute '<line1>,<line2>s#^\t\+#\=repeat(" ", len(submatch(0))*' . &ts . ')'
:command! -range=% -nargs=0 Space2Tab execute '<line1>,<line2>s#^\( \{'.&ts.'\}\)\+#\=repeat("\t", len(submatch(0))/' . &ts . ')'

" Search highlighting (disable with :noh)
set ignorecase
set smartcase	" case-sensitive iif search contains an uppercase character
set hlsearch	" use :noh to clear highlights
set incsearch	" search while typing the search instead of waiting for <CR>
set wildignore+=.git,tmp,**/log/**	" Search within project

" Split settings
set splitright		" new buffer vsplits open on right
set splitbelow		" new buffer splits open on bottom

" Auto indent
set smartindent
set autoindent

" Remove trailing whitespaces on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Indent on save
"autocmd BufWritePre <buffer> call Preserve('normal gg=G')

" Restore cursor position, window position, and last search after running a command
function! Preserve(command)
	let search = @/		" Save the last search
	let cursor_position = getpos('.')		" Save the current cursor position
	normal! H
	let window_position = getpos('.')
	call setpos('.', cursor_position)
	execute a:command
	let @/ = search		" Restore the last search
	call setpos('.', window_position)		" Restore the previous window position
	normal! zt
	call setpos('.', cursor_position)		" Restore the previous cursor position
endfunction

" HTML tidy
function! HtmlTidy()
	normal! mz	" save cursor position
	"g/^$/d	" delete empty lines
	"call <SID>StripTrailingWhitespaces()
	"normal! gg=G	" indent
	"RetabIndent
	!tidy -i -o % -wrap 0 --show-errors 0 %
	normal! `z	" restore cursor position
endfunction

" Save while creating all parent dirs
if !exists('*WriteCreatingDirs')
	function WriteCreatingDirs()
		execute ':silent !mkdir %:h'
		write
	endfunction
	command W call WriteCreatingDirs()
endif

" Folding settings
set foldmethod=manual   " fold based on intent
inoremap <F9> <C-O>za		" toggle fold with F9
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" Keyboard shortcuts
let mapleader=","								" change default leader to comma
nnoremap k gk
nnoremap j gj
nnoremap <silent> gh :bp!<CR>		" buffer left
nnoremap <silent> gl :bn!<CR>		" buffer right
nnoremap <C-h> <C-w>h						" window left
nnoremap <C-j> <C-w>j						" window down
nnoremap <C-k> <C-w>k						" window up
nnoremap <C-l> <C-w>l						" window right
nnoremap <A-]> <C-t>						" tag stack back
nnoremap <tab> :tabnext<CR>
nnoremap <S-tab> :tabprevious<CR>
nnoremap <C-t> :tabnew<CR>
nnoremap <C-x> :tabclose<CR>
nnoremap <C-a> :tabe $MYVIMRC<CR>				" edit .vimrc in a new tab
nnoremap <C-CR> i<CR><ESC>			" insert new line
nnoremap <leader>w :w!<CR>			" save
nnoremap <leader>q <C-w>q				" window quit
nnoremap <silent> <leader>n :NERDTreeToggle<CR>		" open NERDtree
inoremap <C-@> <C-x><C-o>				" Ctrl-space for omnicomplete
vnoremap <F4> :execute "noautocmd vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>	" Recursive search
vnoremap // y/<C-R>"<CR>				" search within file for highlighted word
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>	" search and replace within file
nnoremap <silent> <F12> :call HtmlTidy()<CR>
"nnoremap <M-j> <C-e>						" screen down one line
"nnoremap <M-k> <C-y>						" screen up one line
"nnoremap <F3> ggVGg?						" ROT13 scramble
